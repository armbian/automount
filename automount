#!/usr/bin/env python3

from monitor import Monitor
from signal import signal, SIGHUP, SIGINT, SIGTERM
from util import *

print("Reading config")
config = read_config()

def handle_sighup(n, f):
    print("Reading config")
    global config
    config = read_config()
signal(SIGHUP , handle_sighup)

context = {}

def auto_mount_if(options, device):
    auto_mount = options.get("auto-mount")
    if auto_mount in [ "on", "On", "ON", "true", "True", "TRUE", "yes", "Yes", "YES" ]:
        cmd = [ "/usr/bin/udisksctl", "mount", "-b", device ]

        mount_options = options.get("mount-options")
        if mount_options: cmd = cmd + ["-o", mount_options]

        mount_as = options.get("mount-as")
        if mount_as:
            old_len = len(cmd)

            ug = mount_as.split(":", 1)
            if ug[0]: cmd = ["-u", ug[0]] + cmd
            if len(ug) > 1 and ug[1]: cmd = ["-g", ug[1]] + cmd

            if len(cmd) > old_len: cmd = ["sudo"] + cmd
        run(cmd)

def device_added(path, device, size):
    env = udev_props(device, size)
    context[path] = env
    options = device_options(config, env)

    on_add = options.get("on-add")
    if on_add: run(on_add, env)

    auto_mount_if(options, device)

def on_unmount_if(options, env):
    on_unmount = options.get("on-unmount")
    if on_unmount:
        for mount in env.get("MOUNT_POINTS", []):
            env["MOUNT_POINT"] = quote(mount)
            run(on_unmount, env)
        env.pop("MOUNT_POINT", None)
        env.pop("MOUNT_POINTS", None)

def device_removed(path):
    env = context.get(path)
    if env:
        options = device_options(config, env)
        on_unmount_if(options, env)

        on_remove = options.get("on-remove")
        if on_remove: run(on_remove, env)

        context.pop(path)

def device_changed(path, device, size):
    old_usage = context.get(path, {}).get("ID_FS_USAGE", None)

    env = udev_props(device, size)
    context[path] = env
    options = device_options(config, env)

    on_change = options.get("on-change")
    if on_change: run(on_change, env)

    usage = env.get("ID_FS_USAGE", None)
    # media was inserted - check auto-mount
    if not old_usage and usage: auto_mount_if(options, device)
    # media was removed - check on-unmount
    elif old_usage and not usage: on_unmount_if(options, env)

def mounts_changed(path, new_mounts):
    env = context.get(path)
    if env:
        options = device_options(config, env)
        old_mounts = env.get("MOUNT_POINTS", [])

        on_unmount = options.get("on-unmount")
        if on_unmount:
            for mount in old_mounts:
                if mount not in new_mounts:
                    env["MOUNT_POINT"] = quote(mount)
                    run(on_unmount, env)

        on_mount = options.get("on-mount")
        if on_mount:
            for mount in new_mounts:
                if mount not in old_mounts:
                    env["MOUNT_POINT"] = quote(mount)
                    run(on_mount, env)

        env.pop("MOUNT_POINT", None)
        env["MOUNT_POINTS"] = new_mounts

print("Creating monitor")
monitor = Monitor(device_added, device_removed, device_changed, mounts_changed)

def handle_sigint(n, f):
    print(f"Received signal {n} - exiting")
    global monitor
    monitor.quit()
signal(SIGINT , handle_sigint)
signal(SIGTERM, handle_sigint)

print("Starting monitor loop")
monitor.run()
